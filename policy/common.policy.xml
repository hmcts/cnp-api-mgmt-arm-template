<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <cache-lookup-value key="@("s2s-cache")" variable-name="s2s-cache" />
        <!-- If API Management doesnâ€™t find it in the cache, make a request for it and store it -->
        <choose>
            <when condition="@(!context.Variables.ContainsKey("s2s-cache"))">
                <!-- Key seed from keyvault -->
                <send-request mode="new" response-variable-name="token" timeout="20" ignore-error="false">
                    <set-url>https://{{ccd-keyvault-name}}.vault.azure.net/secrets/{{ccd-service-key-name}}/?api-version=7.0</set-url>
                    <set-method>GET</set-method>
                    <authentication-managed-identity resource="https://vault.azure.net" />
                </send-request>
                <!-- Compute OTP -->
                <send-request mode="new" response-variable-name="otp" timeout="20" ignore-error="false">
                    <set-url>{{ccd-totp-url}}</set-url>
                    <set-method>GET</set-method>
                    <set-header name="service-key" exists-action="override">
                        <value>@{ return (((IResponse)context.Variables["token"]).Body.As<JObject>()["value"].ToString()); }</value>
                    </set-header>
                </send-request>
                <!-- generate S2S token -->
                <send-request mode="new" response-variable-name="s2s" timeout="20" ignore-error="false">
                    <set-url>{{ccd-s2s-url}}</set-url>
                    <set-method>POST</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("microservice","{{ccd-microservice-name}}"),
                            new JProperty("oneTimePassword", (((IResponse)context.Variables["otp"]).Body.As<JObject>()["totp"].ToString()))
                        ).ToString();
                    }</set-body>
                </send-request>
                <set-backend-service base-url="{{ccd-backend-url}}" />
                <!-- Store result in cache for 4 hours-->
                <cache-store-value key="@("s2s-cache")" value="@(((IResponse)context.Variables["s2s"]).Body.As<string>().ToString())" duration="14400" />
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>