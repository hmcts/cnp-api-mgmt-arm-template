{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "publisherEmail": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The email address of the owner of the service"
      }
    },
    "publisherName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the owner of the service"
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Developer",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Developer",
      "metadata": {
        "description": "The pricing tier of this API Management service"
      }
    },
    "skuCount": {
      "type": "string",
      "allowedValues": [
        "1",
        "2"
      ],
      "defaultValue": "1",
      "metadata": {
        "description": "The instance size of this API Management service."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Environment to be deployed in to."
      }
    },
    "virtualNetworkType": {
      "type": "string",
      "defaultValue": "External",
      "allowedValues": [
        "Internal",
        "External"
      ]
    },
    "oAuthDisplayName": {
      "type": "string"
    },
    "oAuthDescription": {
      "type": "string",
      "defaultValue": null
    },
    "oAuthClientRegistrationEndpoint": {
      "type": "string",
      "defaultValue": null
    },
    "oAuthGrantTypes": {
      "type": "array",
      "defaultValue": ["authorizationCode"],
      "allowedValues": [
        ["authorizationCode"],
        ["implicit"],
        ["resourceOwnerPassword"],
        ["clientCredentials"]
      ]
    },
    "oAuthEndpointUrl": {
      "type": "string"
    },
    "oAuthMethods": {
      "type": "array",
      "defaultValue": ["GET"],
      "allowedValues": [
        ["GET"],
        ["GET", "POST"]
      ]
    },
    "oAuthTokenEndpointUri": {
      "type": "string"
    },
    "oAuthClientAuthenticationMethod": {
      "type": "array",
      "defaultValue": ["Basic"],
      "allowedValues": [
        ["Basic"],
        ["Body"],
        ["Basic", "Body"]
      ]
    },
    "oAuthTokenSendingMethod": {
      "type": "array",
      "defaultValue": ["authorizationHeader"],
      "allowedValues": [
        ["authorizationHeader"],
        ["query"],
        ["authorizationHeader", "query"]
      ]
    },
    "oAuthClientId": {
      "type": "string"
    },
    "oAuthClientSecret": {
      "type": "string"
    },
    "oAuthResourceOwner": {
      "type": "string",
      "defaultValue": null
    },
    "oAuthResourceOwnerPassword": {
      "type": "string",
      "defaultValue": null
    },
    "oAuthDefaultScope": {
      "type": "string",
      "defaultValue": null
    },
    "ccd-keyvault-name": {
      "type": "string"
    },
    "ccd-service-key-name": {
      "type": "string"
    },
    "ccd-totp-url": {
      "type": "string"
    },
    "ccd-s2s-url": {
      "type": "string"
    },
    "ccd-backend-url": {
      "type": "string"
    },
    "branch": {
      "type": "string"
    },
    "managedBy": {
      "type": "string"
    },
    "solutionOwner": {
      "type": "string"
    },
    "activityName": {
      "type": "string"
    },
    "dataClassification": {
      "type": "string"
    },
    "automation": {
      "type": "string"
    },
    "costCentre": {
      "type": "string"
    },
    "environment": {
      "type": "string"
    },
    "criticality": {
      "type": "string"
    },
    "shortName": {
      "type": "string",
      "metadata": {
        "description": "Environment short nme used for resource group allocation"
      }
    }
  },
  "variables": {
    "apiManagementServiceName": "[concat('core-api-mgmt-',parameters('environmentName'))]",
    "apiManagementSubnet": "[concat('core-api-mgmt-',parameters('environmentName'))]",
    "VirtualNetworkResourceGroup": "[concat('core-infra-',parameters('shortName'))]",
    "VirtualNetworkName": "[concat('core-infra-vnet-',parameters('shortName'))]",
    "VirtualNetworkSubnetName": "[concat('core-infra-subnet-apimgmt-',parameters('shortName'))]",
    "SubnetResourceId": "[resourceId(variables('VirtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks/subnets',variables('VirtualNetworkName'),variables('VirtualNetworkSubnetName'))]",
    "AuthorizationServerName": "[concat(variables('apiManagementServiceName'), '/idam-aat')]"
  },
  "resources": [
    {
      "apiVersion": "2019-01-01",
      "name": "[variables('apiManagementServiceName')]",
      "type": "Microsoft.ApiManagement/service",
      "location": "[parameters('location')]",
      "tags": {
        "EnvironmentName": "[parameters('environmentName')]",
        "Branch": "[parameters('branch')]",
        "managedBy": "[parameters('managedBy')]",
        "solutionOwner": "[parameters('solutionOwner')]",
        "activityName": "[parameters('activityName')]",
        "dataClassification": "[parameters('dataClassification')]",
        "automation": "[parameters('automation')]",
        "costCentre": "[parameters('costCentre')]",
        "environment": "[parameters('environment')]",
        "criticality": "[parameters('criticality')]"
      },
      "sku": {
        "name": "[parameters('sku')]",
        "capacity": "[parameters('skuCount')]"
      },
      "properties": {
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]",
        "virtualNetworkType": "[parameters('virtualNetworkType')]",
        "virtualNetworkConfiguration": {
          "subnetResourceId": "[variables('SubnetResourceId')]"
        }
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "name": "[variables('AuthorizationServerName')]",
      "type": "Microsoft.ApiManagement/service/authorizationServers",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementServiceName'))]"
      ],
      "properties": {
        "description": "[parameters('oAuthDescription')]",
        "authorizationMethods": "[parameters('oAuthMethods')]",
        "clientAuthenticationMethod": "[parameters('oAuthClientAuthenticationMethod')]",
        "tokenEndpoint": "[parameters('oAuthTokenEndpointUri')]",
        "supportState": "[parameters('oAuthSupportState')]",
        "defaultScope": "[parameters('oAuthDefaultScope')]",
        "bearerTokenSendingMethods": "[parameters('oAuthTokenSendingMethod')]",
        "clientSecret": "[parameters('oAuthClientSecret')]",
        "resourceOwnerUsername": "[parameters('oAuthResourceOwner')]",
        "resourceOwnerPassword": "[parameters('oAuthResourceOwnerPassword')]",
        "displayName": "[parameters('oAuthDisplayName')]",
        "clientRegistrationEndpoint": "[parameters('oAuthClientRegistrationEndpoint')]",
        "authorizationEndpoint": "[parameters('oAuthEndpointUrl')]",
        "grantTypes": "[parameters('oAuthGrantTypes')]",
        "clientId": "[parameters('oAuthClientId')]"
      }
    },
    {
      "name": "[parameters('policyName')]",
      "type": "Microsoft.ApiManagement/service/apis/policies",
      "apiVersion": "2019-01-01",
      "properties": {
        "value": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <base />\r\n    <send-request mode=\"new\" response-variable-name=\"token\" timeout=\"20\" ignore-error=\"false\">\r\n      <set-url>https://{{ccd-keyvault-name}}.vault.azure.net/secrets/{{ccd-service-key-name}}/?api-version=7.0</set-url>\r\n      <set-method>GET</set-method>\r\n      <authentication-managed-identity resource=\"https://vault.azure.net\" />\r\n    </send-request>\r\n    <send-request mode=\"new\" response-variable-name=\"otp\" timeout=\"20\" ignore-error=\"true\">\r\n      <set-url>{{ccd-totp-url}}</set-url>\r\n      <set-method>GET</set-method>\r\n      <set-header name=\"service-key\" exists-action=\"override\">\r\n        <value>@{ return (((IResponse)context.Variables[\"token\"]).Body.As&lt;JObject&gt;()[\"value\"].ToString()); }</value>\r\n      </set-header>\r\n    </send-request>\r\n    <send-request mode=\"new\" response-variable-name=\"s2s\" timeout=\"20\" ignore-error=\"false\">\r\n      <set-url>{{ccd-s2s-url}}</set-url>\r\n      <set-method>POST</set-method>\r\n      <set-header name=\"Content-Type\" exists-action=\"override\">\r\n        <value>application/json</value>\r\n      </set-header>\r\n      <set-body>@{\r\n                        return new JObject(\r\n                            new JProperty(\"microservice\",\"ccd_gw\"),\r\n                            new JProperty(\"oneTimePassword\", (((IResponse)context.Variables[\"otp\"]).Body.As&lt;JObject&gt;()[\"totp\"].ToString()))\r\n                        ).ToString();\r\n                    }</set-body>\r\n    </send-request>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    }
  ]
}
